// <auto-generated>This is auto-generated code by a DIS Macro. Do not modify.</auto-generated>
namespace Skyline.Protocol.Tables
{
	using System;
	using System.Collections.Generic;
	using System.Linq;

	using Skyline.DataMiner.Net.Helper;
	using Skyline.DataMiner.Scripting;
	using Skyline.Protocol.PollManager;

	using SLNetMessages = Skyline.DataMiner.Net.Messages;

	public class PollManagerTableRow
	{
		private DateTime lastPolledUTCTime;
		private double lastPolledUTCTimeOA = Exceptions.IntNotAvailable;
		private DateTime previouslyPolledUTCTime;
		private double previouslyPolledUTCTimeOA = Exceptions.IntNotAvailable;

		public PollManagerTableRow() { }

		public PollManagerTableRow(params object[] row)
		{
			RequestType = (RequestType)Convert.ToInt32(row[0]);
			Name = Convert.ToString(row[1]);
			PollState = (PollState)Convert.ToInt16(row[2]);
			PollFrequency = TimeSpan.FromSeconds(Convert.ToInt64(row[3]));
			LastPolledUTCTime = DateTime.FromOADate(Convert.ToDouble(row[4]));
			PreviouslyPolledUTCTime = DateTime.FromOADate(Convert.ToDouble(row[5]));
		}

		public RequestType RequestType { get; set; }

		public string Name { get; set; }

		public PollState PollState { get; set; }

		public TimeSpan PollFrequency { get; set; }

		public DateTime LastPolledUTCTime
		{
			get
			{
				if (Convert.ToInt32(lastPolledUTCTimeOA) == Exceptions.IntNotAvailable)
				{
					return default;
				}

				return lastPolledUTCTime;
			}

			set
			{
				if (value == default)
				{
					lastPolledUTCTime = value;
					lastPolledUTCTimeOA = Exceptions.IntNotAvailable;
				}
				else
				{
					lastPolledUTCTime = value;
					lastPolledUTCTimeOA = value.ToOADate();
				}
			}
		}

		public DateTime PreviouslyPolledUTCTime
		{
			get
			{
				if (Convert.ToInt32(previouslyPolledUTCTimeOA) == Exceptions.IntNotAvailable)
				{
					return default;
				}

				return previouslyPolledUTCTime;
			}

			set
			{
				if (value == default)
				{
					previouslyPolledUTCTime = value;
					previouslyPolledUTCTimeOA = Exceptions.IntNotAvailable;
				}
				else
				{
					previouslyPolledUTCTime = value;
					previouslyPolledUTCTimeOA = value.ToOADate();
				}
			}
		}

		public static PollManagerTableRow FromPK(SLProtocol protocol, string pk)
		{
			var row = (object[])protocol.GetRow(Parameter.Pollmanager.tablePid, pk);
			if (row[0] == null)
			{
				return default;
			}

			return new PollManagerTableRow(row);
		}

		public object[] ToProtocolRow()
		{
			return new PollmanagerQActionRow
			{
				Pollmanagerindex_21001 = Convert.ToString((int)RequestType),
				Pollmanagername_21002 = Name,
				Pollmanagerpollstate_21003 = (int)PollState,
				Pollmanagerpollfrequency_21004 = PollFrequency.TotalSeconds,
				Pollmanagerlastpolled_21005 = lastPolledUTCTimeOA,
				Pollmanagerpreviouslypolled_21007 = previouslyPolledUTCTimeOA,
			};
		}

		public void SaveToProtocol(SLProtocol protocol)
		{
			if (!protocol.Exists(Parameter.Pollmanager.tablePid, Convert.ToString((int)RequestType)))
			{
				protocol.AddRow(Parameter.Pollmanager.tablePid, ToProtocolRow());
			}
			else
			{
				protocol.SetRow(Parameter.Pollmanager.tablePid, Convert.ToString((int)RequestType), ToProtocolRow());
			}
		}
	}

	public class PollManagerTable
	{
		private static PollManagerTable instance = new PollManagerTable();

		public PollManagerTable() { }

		public PollManagerTable(SLProtocol protocol)
		{
			uint[] pollManagerIdx = new uint[]
			{
				Parameter.Pollmanager.Idx.pollmanagerindex_21001,
				Parameter.Pollmanager.Idx.pollmanagername_21002,
				Parameter.Pollmanager.Idx.pollmanagerpollstate_21003,
				Parameter.Pollmanager.Idx.pollmanagerpollfrequency_21004,
				Parameter.Pollmanager.Idx.pollmanagerlastpolled_21005,
				Parameter.Pollmanager.Idx.pollmanagerpreviouslypolled_21007,
			};
			object[] pollmanager = (object[])protocol.NotifyProtocol((int)SLNetMessages.NotifyType.NT_GET_TABLE_COLUMNS, Parameter.Pollmanager.tablePid, pollManagerIdx);
			object[] indexIDX = (object[])pollmanager[0];
			object[] name = (object[])pollmanager[1];
			object[] pollState = (object[])pollmanager[2];
			object[] pollFrequency = (object[])pollmanager[3];
			object[] lastPolledUTCTime = (object[])pollmanager[4];
			object[] previouslyPolledUTCTime = (object[])pollmanager[5];

			for (int i = 0; i < indexIDX.Length; i++)
			{
				Rows.Add(new PollManagerTableRow(
				indexIDX[i],
				name[i],
				pollState[i],
				pollFrequency[i],
				lastPolledUTCTime[i],
				previouslyPolledUTCTime[i]));
			}
		}

		public List<PollManagerTableRow> Rows { get; set; } = new List<PollManagerTableRow>();

		public static PollManagerTable GetTable(SLProtocol protocol = null)
		{
			if (protocol != null)
			{
				instance = new PollManagerTable(protocol);
			}

			return instance;
		}

		public void SaveToProtocol(SLProtocol protocol, bool partial = false)
		{
			// Calculate the batch size, recommended 25000 cells max per fill array, divided by the number of columns.
			var batchSize = 25000 / 6;

			// If full then the first batch needs to be a SaveOption.Full.
			var first = !partial;
			if (!Rows.Any() && !partial)
			{
				protocol.ClearAllKeys(Parameter.Repositorytags.tablePid);
				return;
			}

			foreach (var batch in Rows.Select(x => x.ToProtocolRow()).Batch(batchSize))
			{
				if (first)
				{
					protocol.FillArray(Parameter.Pollmanager.tablePid, batch.ToList(), NotifyProtocol.SaveOption.Full);
				}
				else
				{
					protocol.FillArray(Parameter.Pollmanager.tablePid, batch.ToList(), NotifyProtocol.SaveOption.Partial);
				}
			}
		}
	}
}
